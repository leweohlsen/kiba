name: Release
permissions:
  contents: write
on:
  push:
    tags:
      - '*'

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_macos:
    name: Build macOS Installer
    needs: create_release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          # Use Node.js v20 to satisfy engine requirements (e.g., electron-store) and match lockfile expectations
          node-version: '20'
      - name: Get project metadata
        run: |
          echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
          echo "NAME=$(node -p \"require('./package.json').name\")" >> $GITHUB_ENV
      - name: Install dependencies
        # Use npm install in CI to avoid lockfile sync errors; install will update lockfile in-place if needed
        run: npm install
      - name: Make macOS build
        run: npm run make
      - name: Upload macOS assets
        shell: bash
        env:
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Strip off the templated query part ({?name,label}) from the upload URL
          UPLOAD_URL=${UPLOAD_URL%\{*}
          for f in out/make/*.dmg; do
            echo "Uploading $f..."
            curl -s --fail -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/x-apple-diskimage" \
              --data-binary @"$f" \
              "$UPLOAD_URL?name=$(basename "$f")"
          done
          for f in out/make/zip/darwin/*/*.zip; do
            echo "Uploading $f..."
            curl -s --fail -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$f" \
              "$UPLOAD_URL?name=$(basename "$f")"
          done

  build_windows:
    name: Build Windows Installer
    needs: create_release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          # Use Node.js v20 to satisfy engine requirements
          node-version: '20'
      - name: Get project metadata
        # Use a Node one-liner to write version and name to GITHUB_ENV
        shell: bash
        run: |
          node -e 'const pkg=require("./package.json"); console.log(`VERSION=${pkg.version}`); console.log(`NAME=${pkg.name}`);' >> $GITHUB_ENV
      - name: Install dependencies
        # Switch to npm install to prevent CI failure due to package.json/lockfile mismatch
        run: npm install
      - name: Make Windows build
        run: npm run make
      - name: Find Windows EXE
        id: find_windows_exe
        # Use Bash to locate the generated EXE file
        shell: bash
        run: |
          echo "Looking for Windows EXE in out/make..."
          exe=$(find out/make -type f -iname '*.exe' | head -n1)
          if [ -z "$exe" ]; then
            echo "Error: No .exe file found under out/make" >&2
            exit 1
          fi
          echo "Found Windows EXE: $exe"
          echo "windows_asset_path=$exe" >> $GITHUB_OUTPUT
          echo "windows_asset_name=$(basename "$exe")" >> $GITHUB_OUTPUT

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_windows_exe.outputs.windows_asset_path }}
          asset_name: ${{ steps.find_windows_exe.outputs.windows_asset_name }}
          asset_content_type: application/octet-stream